#!/usr/bin/python3

import gi
import os
import sys
import math
import yaml
import argparse

gi.require_version('Gst', '1.0')

from tile_player import copy_sample_config
from gi.repository import GObject, Gst, GLib


class TilePlayer(object):
    def _add_mandatory_arguments(self, parser):
        group = parser.add_mutually_exclusive_group(required=True)
        group.add_argument(
            '-c', '--config',
            help=(
                'A yaml config file containing stream or file URIs'
                ' and playback information'
            ),
            type=str,
            default=None
        )
        group.add_argument(
            '-i', '--inputs',
            type=str,
            nargs='+',
            help='List of input stream or file URIs',
            default=None
        )
        group.add_argument(
            '-g', '--generate',
            help=(
                'Generate sample config file on the provided path.'
            ),
            type=str,
            default=None
        )

    def _add_format_arguments(self, parser):
        parser.add_argument(
            '-f', '--fps',
            help='Playback fps',
            type=int,
            default=25
        )
        parser.add_argument(
            '-w', '--width',
            help=(
                'Tile width. Default: 640'
            ),
            type=int,
            default=640
        )
        parser.add_argument(
            '-a', '--height',
            help=(
                'Tile height. Default: 360'
            ),
            type=int,
            default=360
        )

    def _add_stream_arguments(self, parser):
        parser.add_argument(
            '-p', '--protocol',
            help=(
                'Protocol for camera connection if inputs'
                ' are streams. Cound be "auto", "tcp", or'
                ' "udp". Default is "auto"'
            ),
            type=str,
            default="auto"
        )
        parser.add_argument(
            '-l', '--low_latency',
            help=(
                'Apply latency limit on decoder. Default: False'
            ),
            type=bool,
            default=False
        )

    def _add_overlay_arguments(self, parser):
        parser.add_argument(
            '-t', '--text_size',
            help=(
                'Overlay text size. Default: 30'
            ),
            type=int,
            default=30
        )

    def _add_debug_arguments(self, parser):
        parser.add_argument(
            '-v', '--verbose',
            help=(
                'Print some useful information.'
            ),
            action='store_true'
        )

    def _add_optional_arguments(self, parser):
        self._add_format_arguments(parser)
        self._add_stream_arguments(parser)
        self._add_overlay_arguments(parser)
        self._add_debug_arguments(parser)

    def _get_arguments(self):
        parser = argparse.ArgumentParser()
        
        self._add_mandatory_arguments(parser)
        self._add_optional_arguments(parser)

        args = parser.parse_args()

        return args

    def _get_input_uris(self, args):
        uris = None
        if uris is None and args.config is not None:
            uris = self._load_uris_from_config(args.config)

        if uris is None and args.inputs is not None:
            uris = []
            for uri in args.inputs:
                uris.append({"uri": uri})

        return uris

    def _load_uris_from_config(self, config_path):
        with open(config_path, 'r') as yaml_file:
            config = yaml.safe_load(yaml_file)

        if not config.__contains__("streams"):
            raise Exception("Key \"streams\" not found in config file")

        return config["streams"]

    def __decodebin_child_added(self, child_proxy, Object, name, args):
        if (name.find("decodebin") != -1):
            Object.connect(
                "child-added", self.__decodebin_child_added,
                args
            )
        elif name.find("source") != -1:
            if args.low_latency:
                Object.set_property(
                    "drop-on-latency",
                    1
                )
                Object.set_property(
                    "latency",
                    1000
                )
            if args.protocol != "auto":
                Object.set_property(
                    "protocols",
                    args.protocol
                )

    def _fix_callbacks(self, pipeline, inputs, args):
        for i, source in enumerate(inputs):
            source_name = 'source_bin_{:02d}'.format(i)
            uridecodebin_element = pipeline.get_child_by_name(
                source_name
            )
            uridecodebin_element.connect(
                'child-added', self.__decodebin_child_added, args
            )

    def _generate_mixer_branch(self):
        mixer_branch = (
            'compositor name=mix' +
            ' ! videoconvert' +
            ' ! autovideosink sync=1'
        )

        return mixer_branch

    def _generate_stream_branch(self, inputs, args, index, source, grid):
        x = index % grid
        y = index // grid

        width = inputs[index].get("width", args.width)
        height = inputs[index].get("height", args.height)

        stream_branch = (
            ' uridecodebin name=source_bin_{:02d} uri="{}"'.format(
                index, inputs[index]["uri"]
            ) +
            ' ! videoscale add-borders=0 ! videoconvert ! videorate' +
            ' ! capsfilter' +
            ' caps="video/x-raw, width={},'.format(
                width   
            ) +
            ' height={}, framerate={}/1"'.format(
                height,
                inputs[index].get("fps", args.fps)
            ) +
            ' ! textoverlay text="{}" font-desc="Ubuntu, {}"'.format(
                inputs[index].get("text", ""),
                inputs[index].get("text_size", args.text_size)
            ) +
            ' ! alpha alpha=1' +
            ' ! videobox border-alpha=0 top={} left={}'.format(
                y * -1 * height, x * -1 * width
            ) +
            ' ! mix.'
        )

        return stream_branch

    def _generate_pipeline(self, inputs, args):
        grid = math.ceil(math.sqrt(len(inputs)))

        pipeline = self._generate_mixer_branch()

        for i, source in enumerate(inputs):
            pipeline += self._generate_stream_branch(
                inputs, args, i, source, grid
            )

        return pipeline

    def _run_pipeline(self, pipeline_string, inputs, args):
        Gst.init(None)
        mainloop = GLib.MainLoop()
        
        pipeline = Gst.parse_launch(pipeline_string)
        self._fix_callbacks(pipeline, inputs, args)
        
        pipeline.set_state(Gst.State.PLAYING)
        mainloop.run()

    def _run_pipeline(self, args):
        uris = self._get_input_uris(args)
        if uris is None:
            raise Exception('Unable to obtain input list.')
        else:
            if args.verbose:
                for uri in uris:
                    print("Playing: {}".format(uri))

        pipeline_string = self._generate_pipeline(
            uris, args
        )

        if args.verbose:
            print("Pipeline: {}".format(pipeline_string))

        self._run_pipeline(pipeline_string, uris, args)

    def start(self):
        args = self._get_arguments()

        if args.generate is not None:
            copy_sample_config(args.generate)
        else:
            self._run_pipeline(args)


if __name__ == "__main__":
    tile_player = TilePlayer()
    tile_player.start()    
